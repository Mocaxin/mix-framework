<?php

namespace Mix\Pool;

use Mix\Core\Component;
use Mix\Core\ComponentInterface;

/**
 * Class ConnectionPool
 * @author LIUJIAN <coder.keda@gmail.com>
 * @package Mix\Pool
 */
class ConnectionPool extends Component implements ConnectionPoolInterface
{

    /**
     * 协程模式
     * @var int
     */
    public static $coroutineMode = ComponentInterface::COROUTINE_MODE_REFERENCE;

    /**
     * 最多可空闲连接数
     * @var int
     */
    public $maxIdle = 5;

    /**
     * 最大连接数
     * @var int
     */
    public $maxActive = 5;

    /**
     * 连接类名
     * @var array|string
     */
    public $connectionClass;

    /**
     * 连接队列
     * @var \Swoole\Coroutine\Channel
     */
    protected $_queue;

    /**
     * 活跃连接集合
     * @var int
     */
    protected $_actives = 0;

    /**
     * 初始化事件
     */
    public function onInitialize()
    {
        parent::onInitialize(); // TODO: Change the autogenerated stub
        // 创建协程队列
        $this->_queue = new \Swoole\Coroutine\Channel($this->maxIdle);
    }

    /**
     * 创建连接
     * @return mixed
     */
    public function createConnection()
    {
        $class = $this->connectionClass;
        $name  = 'default';
        if (is_array($class)) {
            if (isset($class['name'])) {
                $name = $class['name'];
            }
            $class = array_shift($class);
        }
        if (!is_subclass_of($class, '\Mix\Core\StaticInstanceInterface')) {
            throw new \Mix\Exceptions\InvalidArgumentException('Property \'connectionClass\' is not implemented \Mix\Core\StaticInstanceInterface interface.');
        }
        return $class::newInstanceByName($name);
    }

    /**
     * 获取连接
     * @return mixed
     */
    public function getConnection()
    {
        if ($this->getIdleNumber() > 0 || $this->getTotalNumber() >= $this->maxActive) {
            // 队列有连接，从队列取
            // 达到最大连接数，从队列取
            $connection = $this->pop();
        } else {
            // 创建连接
            $connection = $this->createConnection();
        }
        $this->_actives++;
        return $connection;
    }

    /**
     * 释放连接
     * @param $connection
     */
    public function release($connection)
    {
        $this->push($connection);
        $this->_actives--;
    }

    /**
     * 获取连接池的统计信息
     * @return array
     */
    public function getStats()
    {
        return [
            'total'  => $this->getTotalNumber(),
            'idle'   => $this->getIdleNumber(),
            'active' => $this->getActiveNumber(),
        ];
    }

    /**
     * 放入连接
     * @param $connection
     * @return bool
     */
    protected function push($connection)
    {
        if ($this->getIdleNumber() < $this->maxIdle) {
            return $this->_queue->push($connection);
        }
        return false;
    }

    /**
     * 弹出连接
     * @return mixed
     */
    protected function pop()
    {
        return $this->_queue->pop();
    }

    /**
     * 获取队列中的连接数
     * @return int
     */
    protected function getIdleNumber()
    {
        $count = $this->_queue->stats()['queue_num'];
        return $count < 0 ? 0 : $count;
    }

    /**
     * 获取活跃的连接数
     * @return int
     */
    protected function getActiveNumber()
    {
        return $this->_actives;
    }

    /**
     * 获取当前总连接数
     * @return int
     */
    protected function getTotalNumber()
    {
        return $this->getIdleNumber() + $this->getActiveNumber();
    }

}
