<?php

namespace Mix\Pool;

use Mix\Core\Component;
use Mix\Core\ComponentInterface;

/**
 * ConnectionPool组件
 * @author 刘健 <coder.liu@qq.com>
 */
class ConnectionPool extends Component
{

    // 协程模式
    public static $coroutineMode = ComponentInterface::COROUTINE_MODE_REFERENCE;

    // 最多可空闲连接数
    public $maxIdle;

    // 最大连接数
    public $maxActive;

    // 连接队列
    protected $_queue;

    // 活跃连接集合
    protected $_actives;

    // 初始化事件
    public function onInitialize()
    {
        parent::onInitialize(); // TODO: Change the autogenerated stub
        // 创建协程队列
        $this->_queue = new \Swoole\Coroutine\Channel($this->maxIdle);
    }

    // 获取连接
    public function getConnection()
    {
        if ($this->getIdleNumber() > 0 || $this->getTotalNumber() >= $this->maxActive) {
            // 队列有连接，从队列取
            // 达到最大连接数，从队列取
            $connection = $this->pop();
        } else {
            // 创建连接
            $connection = $this->createConnection();
        }
        $this->_actives++;
        return $connection;
    }

    // 释放连接
    public function release($connection)
    {
        $this->push($connection);
        $this->_actives--;
    }

    // 获取连接池的统计信息
    public function getStats()
    {
        return [
            'total'  => $this->getTotalNumber(),
            'idle'   => $this->getIdleNumber(),
            'active' => $this->getActiveNumber(),
        ];
    }

    // 放入连接
    protected function push($connection)
    {
        if ($this->getIdleNumber() < $this->maxIdle) {
            return $this->_queue->push($connection);
        }
        return false;
    }

    // 弹出连接
    protected function pop()
    {
        return $this->_queue->pop();
    }

    // 获取队列中的连接数
    protected function getIdleNumber()
    {
        $count = $this->_queue->stats()['queue_num'];
        return $count < 0 ? 0 : $count;
    }

    // 获取活跃的连接数
    protected function getActiveNumber()
    {
        return $this->_actives;
    }

    // 获取当前总连接数
    protected function getTotalNumber()
    {
        return $this->getIdleNumber() + $this->getActiveNumber();
    }

}
