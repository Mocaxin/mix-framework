<?php

namespace mix\client;

use mix\client\BasePDO;
use mix\helpers\CoroutineHelper;

/**
 * BasePdo组件
 * @author 刘健 <coder.liu@qq.com>
 */
class PDOCoroutine extends BasePDO
{

    /**
     * 连接池
     * @var \mix\pool\ConnectionPool
     */
    public $connectionPool;

    // 初始化事件
    public function onInitialize()
    {
        parent::onInitialize(); // TODO: Change the autogenerated stub
        // 开启协程
        CoroutineHelper::enableCoroutine();
    }

    // 析构事件
    public function onDestruct()
    {
        parent::onDestruct();
        // 关闭连接
        $this->disconnect();
    }

    // 创建连接
    protected function createConnection()
    {
        $this->connectionPool->activeCountIncrement();
        $pdo = parent::createConnection();
        return $pdo;
    }

    // 获取连接
    protected function getConnection()
    {
        while ($this->connectionPool->getQueueCount() > 0) {
            $connection = $this->connectionPool->pop();
            if ($connection) {
                return $connection;
            }
        }
        while ($this->connectionPool->getCurrentCount() >= $this->connectionPool->max) {
            $connection = $this->connectionPool->pop();
            if ($connection) {
                return $connection;
            }
        }
        return $this->createConnection();
    }

    // 连接
    protected function connect()
    {
        $this->_pdo = $this->getConnection();
    }

    // 关闭连接
    public function disconnect()
    {
        if (isset($this->_pdo)) {
            $this->connectionPool->push($this->_pdo);
            $this->connectionPool->activeCountDecrement();
        }
        parent::disconnect();
    }

    // 执行前准备
    protected function prepare()
    {
        try {
            // 执行前准备
            parent::prepare();
        } catch (\Throwable $e) {
            // 销毁失效连接
            parent::disconnect();
            // 抛出异常
            throw $e;
        }
    }

    // 开始事务
    public function beginTransaction()
    {
        try {
            // 执行前准备
            return parent::beginTransaction();
        } catch (\Throwable $e) {
            // 销毁失效连接
            parent::disconnect();
            // 抛出异常
            throw $e;
        }
    }

}
